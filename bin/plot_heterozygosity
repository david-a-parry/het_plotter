#!/usr/bin/env python3
from collections import defaultdict
from het_plotter.het_counter import PosCounter, counts_to_df, get_gt_counts
from het_plotter.plot import plot_zygosity
from itertools import repeat
import argparse
import logging
import multiprocessing as mp
import os
import pysam
import re
import sys

chrom_re = re.compile(r'''^(chr)?[1-9][0-9]?$''')


def initialize_mp_logger(logger, loglevel, logfile=None):
    logger.setLevel(loglevel)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter(
      '[%(asctime)s] HetPlotter-%(processName)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    if logfile is not None:
        fh = logging.FileHandler(logfile)
        fh.setLevel(logger.level)
        fh.setFormatter(formatter)
        logger.addHandler(fh)


def _process_runner(tup):
    kwargs1, kwargs2 = tup
    kwargs2.update(kwargs1)
    return count_genotypes(**kwargs2)


def get_logger(loglevel=logging.INFO, logfile=None):
    logger = logging.getLogger("HetPlotter")
    logger.setLevel(loglevel)
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter(
           '[%(asctime)s] %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    if logfile is not None:
        fh = logging.FileHandler(logfile)
        fh.setLevel(logger.level)
        fh.setFormatter(formatter)
        logger.addHandler(fh)
    return logger


def count_genotypes(vcf, samples, contig, out_dir=None, coordinate_table=None,
                    parents=None, children=set(), prog_interval=10000,
                    window_length=1e5, roi=dict(), centromeres=dict(),
                    logger=None, loglevel=logging.INFO, plot=True, csv=None):
    if logger is None:
        logger = mp.get_logger()
        if logger.level == logging.NOTSET:
            initialize_mp_logger(logger, loglevel)
    logger.info("Reading chromosome {}".format(contig))
    gt_counter = get_gt_counts(vcf, samples, contig, logger,
                               prog_interval=prog_interval,
                               window_length=window_length)
    logger.info("Finished processing variants for contig {}".format(contig))
    frac_df = None
    if csv is not None:
        chrom_csv = csv + '_{}.csv.gz'.format(contig)
        logger.info("Converting counts for chromosome {} to ".format(contig) +
                    "dataframe and writing to {}".format(chrom_csv))
        frac_df = counts_to_df(gt_counter, window_length)
        frac_df.to_csv(chrom_csv, compression='gzip', index=False)
    if plot:
        plot_zygosity(gt_counter, contig, out_dir, logger, df=frac_df,
                      window_length=window_length, centromeres=centromeres,
                      roi=roi)
    else:
        return gt_counter


def read_roi_bed(bedfile):
    roi = defaultdict(list)
    with open(bedfile, 'rt') as infile:
        for line in infile:
            cols = line.split()
            if len(cols) < 3:
                sys.exit("Not enough columns in bed for {}".format(bedfile))
            region = [int(cols[1]) + 1, int(cols[2])]
            if len(cols) > 3:
                region.append(cols[3])
            roi[cols[0]].append(region)
    return roi


def read_centromere_bed(bedfile):
    centromeres = dict()
    with open(bedfile, 'rt') as infile:
        for line in infile:
            cols = line.split()
            if len(cols) < 3:
                sys.exit("Not enough columns in bed for {}".format(bedfile))
            centromeres[cols[0]] = (int(cols[1]) + 1, int(cols[2]),
                                    'centromere')
    return centromeres


def main(vcf, samples=[], chromosomes=[], output_directory='zygosity_plots',
         build=None, roi=None, progress_interval=10000, threads=1,
         window_size=1e5, force=False, csv=None):
    logger = get_logger()
    centromeres = dict()
    if build is not None:
        cfile = os.path.join(os.path.dirname(__file__), "data",
                             build + "_centromeres.bed")
        if os.path.exists(cfile):
            centromeres = read_centromere_bed(cfile)
        else:
            sys.exit("No centromere file ({}) for build {}".format(cfile,
                                                                   build))
    highlight_regions = dict()
    if roi is not None:
        highlight_regions = read_roi_bed(roi)
    if not os.path.isdir(output_directory):
        os.mkdir(output_directory)
    elif not force:
        sys.exit("Output directory '{}' exists ".format(output_directory) +
                 "- use --force to overwrite")
    if not samples:
        var_file = pysam.VariantFile(vcf)
        samples = list(var_file.header.samples)
        var_file.close()
    if not chromosomes:
        chromosomes = get_seq_ids(vcf)
    kwargs = {'vcf': vcf, 'prog_interval': progress_interval,
              'out_dir': output_directory, 'samples': samples,
              'window_length': window_size, 'roi': highlight_regions,
              'centromeres': centromeres, 'plot': True, 'csv': csv}
    contig_args = ({'contig': x} for x in chromosomes)
    if not contig_args:
        raise RuntimeError("No valid contigs identified in {}".format(vcf))
    if threads > 1:
        with mp.Pool(threads) as p:
            _ = p.map(_process_runner, zip(contig_args, repeat(kwargs)))
    else:
        for c in contig_args:
            kwargs.update(c)
            count_genotypes(**kwargs)
    logger.info("Finished.")


def get_seq_ids(vcf):
    if vcf.endswith(".bcf"):
        idx = vcf + '.csi'
        preset = 'bcf'
    else:
        idx = vcf + '.tbi'
        preset = 'vcf'
    if not os.path.isfile(idx):  # create index if it doesn't exist
        pysam.tabix_index(vcf, preset=preset)
    if preset == 'bcf':
        vf = pysam.VariantFile(vcf)
        return (c for c in vf.index.keys() if chrom_re.match(c))
    else:
        tbx = pysam.TabixFile(vcf)
        return (c for c in tbx.contigs if chrom_re.match(c))


def get_parser():
    parser = argparse.ArgumentParser(
                  description='Plot heterozygosity from a VCF.')
    parser.add_argument("-i", "--vcf", "--input", required=True,
                        help="Input VCF file.")
    parser.add_argument("-s", "--samples", nargs='+', help='''One or more
                        samples to plot. Defaults to all in VCF.''')
    parser.add_argument("-c", "--chromosomes", nargs='+', help='''One or more
                        chromosomes to plot. Defaults to all in standard
                        chromosomes.''')
    parser.add_argument("-o", "--output_directory", default='zygosity_plots',
                        help='''Directory to place plot PNG files.
                                Default='zygosity_plots'.''')
    parser.add_argument("--csv", metavar='PREFIX',  help='''Write CSVs (one per
                        chrom) with this prefix. CSVs will be named
                        "<PREFIX><CHROM>.csv.gz"''')
    parser.add_argument("-w", "--window_size", type=float, default=1e5,
                        help='''Windows size to use when calculating ratios of
                        heterozygous vs homozygous genotypes. Default=1e5.''')
    parser.add_argument("-t", "--threads", type=int, default=1, help='''Number
                         of threads to use. Default=1. Maximum will be
                        determined by the number of chromosomes in your
                        reference.''')
    parser.add_argument("--progress_interval", type=int, default=10000,
                        metavar='N', help='''Report progress every N
                        variants.''')
    parser.add_argument("-b", "--build", help='''Genome build. If specified,
                        centromeres will be marked if there is a corresponding
                        BED file of centromere locations in the 'data'
                        subdirectory (hg19, hg38, GRCh37, GRCh38 available by
                        default).''')
    parser.add_argument("-r", "--roi", help='''BED file of regions of interest.
                        If a 4th column is present this will be used to label
                        these regions.''')
    parser.add_argument("--force", action='store_true', help='''Overwrite
                        existing output directories.''')
    return parser


if __name__ == '__main__':
    argparser = get_parser()
    args = argparser.parse_args()
    main(**vars(args))
